import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.diffplug.spotless' version '6.25.0'
	id 'org.openapi.generator' version '7.12.0'
	id 'info.solidsoft.pitest' version '1.15.0'
}

sourceSets {
	main {
		java {
			srcDir(layout.buildDirectory.dir("generated/sources/openapi/src/main/java"))
		}
	}
}

group = 'dev.pollito'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	implementation 'org.aspectj:aspectjtools:1.9.22.1'
	implementation 'org.jetbrains:annotations:26.0.2'
	implementation 'io.micrometer:micrometer-observation:1.14.4'
	implementation 'io.micrometer:micrometer-tracing-bridge-otel:1.4.3'

	implementation 'io.swagger.core.v3:swagger-core-jakarta:2.2.28'
	implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.2.1'
	implementation 'io.github.openfeign:feign-okhttp:13.5'
	implementation 'io.github.openfeign:feign-jackson:13.5'
	implementation 'io.github.openfeign:feign-gson:13.5'

	implementation 'org.mapstruct:mapstruct:1.6.3'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'
	annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'com.github.ben-manes.caffeine:caffeine:3.2.0'
}

tasks.named('test') {
	dependsOn 'pitest'
	useJUnitPlatform()
}

tasks.named("build") {
	dependsOn 'spotlessApply'
	dependsOn 'spotlessGroovyGradleApply'
}

tasks.named('compileJava') {
	dependsOn 'openApiGenerate', 'openApiGenerateFeign_jsonplaceholder'
}

spotless {
	java {
		target 'src/*/java/**/*.java'
		googleJavaFormat()
		removeUnusedImports()
		cleanthat()
		formatAnnotations()
	}
	groovyGradle {
		target '*.gradle'
		greclipse()
	}
}

openApiGenerate {
	apiPackage = "${project.group}.${project.name}.api".toString()
	configOptions = [
		interfaceOnly: "true",
		skipOperationExample: "true",
		useEnumCaseInsensitive: "true",
		useSpringBoot3: "true"
	]
	generateApiTests = false
	generateApiDocumentation = false
	generateModelTests = false
	generateModelDocumentation = false
	generatorName = "spring"
	inputSpec = "$rootDir/src/main/resources/openapi/users_manager.yaml".toString()
	modelPackage = "${project.group}.${project.name}.model".toString()
	outputDir = layout.buildDirectory.dir("generated/sources/openapi").get().asFile.toString()
}

tasks.register("openApiGenerateFeign_jsonplaceholder", GenerateTask) {
	apiPackage = "com.typicode.jsonplaceholder.api".toString()
	configOptions = [
		"feignClient": "true",
		"interfaceOnly": "true",
		"useEnumCaseInsensitive": "true",
		"useJakartaEe": "true"
	]
	generateApiTests = false
	generateApiDocumentation = false
	generateModelTests = false
	generateModelDocumentation = false
	generatorName = "java"
	inputSpec = "$rootDir/src/main/resources/openapi/jsonplaceholder.yaml".toString()
	library = "feign"
	modelPackage = "com.typicode.jsonplaceholder.model".toString()
	outputDir = layout.buildDirectory.dir("generated/sources/openapi").get().asFile.toString()
}

pitest {
	junit5PluginVersion = '1.2.1'
	outputFormats = ['HTML']
	targetClasses = [
		"${project.group}.${project.name}.controller.*".toString(),
		"${project.group}.${project.name}.service.*".toString(),
	]
	targetTests = [
		"${project.group}.${project.name}.*".toString()
	]
	timestampedReports = false
	useClasspathFile = true
}